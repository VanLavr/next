// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: next.proto

package next

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserController_Create_FullMethodName    = "/next.UserController/Create"
	UserController_Update_FullMethodName    = "/next.UserController/Update"
	UserController_Delete_FullMethodName    = "/next.UserController/Delete"
	UserController_Fetch_FullMethodName     = "/next.UserController/Fetch"
	UserController_FetchByID_FullMethodName = "/next.UserController/FetchByID"
)

// UserControllerClient is the client API for UserController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserControllerClient interface {
	Create(ctx context.Context, in *CreateUser, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateUser, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteUser, opts ...grpc.CallOption) (*DeleteResponse, error)
	Fetch(ctx context.Context, in *FetchUsers, opts ...grpc.CallOption) (*FetchResponse, error)
	FetchByID(ctx context.Context, in *FetchUserByID, opts ...grpc.CallOption) (*FetchIDResponse, error)
}

type userControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserControllerClient(cc grpc.ClientConnInterface) UserControllerClient {
	return &userControllerClient{cc}
}

func (c *userControllerClient) Create(ctx context.Context, in *CreateUser, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, UserController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControllerClient) Update(ctx context.Context, in *UpdateUser, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, UserController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControllerClient) Delete(ctx context.Context, in *DeleteUser, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, UserController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControllerClient) Fetch(ctx context.Context, in *FetchUsers, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, UserController_Fetch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControllerClient) FetchByID(ctx context.Context, in *FetchUserByID, opts ...grpc.CallOption) (*FetchIDResponse, error) {
	out := new(FetchIDResponse)
	err := c.cc.Invoke(ctx, UserController_FetchByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserControllerServer is the server API for UserController service.
// All implementations must embed UnimplementedUserControllerServer
// for forward compatibility
type UserControllerServer interface {
	Create(context.Context, *CreateUser) (*CreateResponse, error)
	Update(context.Context, *UpdateUser) (*UpdateResponse, error)
	Delete(context.Context, *DeleteUser) (*DeleteResponse, error)
	Fetch(context.Context, *FetchUsers) (*FetchResponse, error)
	FetchByID(context.Context, *FetchUserByID) (*FetchIDResponse, error)
	mustEmbedUnimplementedUserControllerServer()
}

// UnimplementedUserControllerServer must be embedded to have forward compatible implementations.
type UnimplementedUserControllerServer struct {
}

func (UnimplementedUserControllerServer) Create(context.Context, *CreateUser) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserControllerServer) Update(context.Context, *UpdateUser) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserControllerServer) Delete(context.Context, *DeleteUser) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserControllerServer) Fetch(context.Context, *FetchUsers) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedUserControllerServer) FetchByID(context.Context, *FetchUserByID) (*FetchIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchByID not implemented")
}
func (UnimplementedUserControllerServer) mustEmbedUnimplementedUserControllerServer() {}

// UnsafeUserControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserControllerServer will
// result in compilation errors.
type UnsafeUserControllerServer interface {
	mustEmbedUnimplementedUserControllerServer()
}

func RegisterUserControllerServer(s grpc.ServiceRegistrar, srv UserControllerServer) {
	s.RegisterService(&UserController_ServiceDesc, srv)
}

func _UserController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControllerServer).Create(ctx, req.(*CreateUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControllerServer).Update(ctx, req.(*UpdateUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControllerServer).Delete(ctx, req.(*DeleteUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserController_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControllerServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserController_Fetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControllerServer).Fetch(ctx, req.(*FetchUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserController_FetchByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchUserByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControllerServer).FetchByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserController_FetchByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControllerServer).FetchByID(ctx, req.(*FetchUserByID))
	}
	return interceptor(ctx, in, info, handler)
}

// UserController_ServiceDesc is the grpc.ServiceDesc for UserController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "next.UserController",
	HandlerType: (*UserControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserController_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserController_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserController_Delete_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _UserController_Fetch_Handler,
		},
		{
			MethodName: "FetchByID",
			Handler:    _UserController_FetchByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "next.proto",
}

const (
	Application_Create_FullMethodName    = "/next.Application/Create"
	Application_Update_FullMethodName    = "/next.Application/Update"
	Application_Delete_FullMethodName    = "/next.Application/Delete"
	Application_Fetch_FullMethodName     = "/next.Application/Fetch"
	Application_FetchByID_FullMethodName = "/next.Application/FetchByID"
)

// ApplicationClient is the client API for Application service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationClient interface {
	Create(ctx context.Context, in *CreateApp, opts ...grpc.CallOption) (*CreateAppResponse, error)
	Update(ctx context.Context, in *UpdateApp, opts ...grpc.CallOption) (*UpdateAppResponse, error)
	Delete(ctx context.Context, in *DeleteApp, opts ...grpc.CallOption) (*DeleteAppResponse, error)
	Fetch(ctx context.Context, in *FetchApp, opts ...grpc.CallOption) (*FetchAppResponse, error)
	FetchByID(ctx context.Context, in *FetchAppByID, opts ...grpc.CallOption) (*FetchAppIDResponse, error)
}

type applicationClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationClient(cc grpc.ClientConnInterface) ApplicationClient {
	return &applicationClient{cc}
}

func (c *applicationClient) Create(ctx context.Context, in *CreateApp, opts ...grpc.CallOption) (*CreateAppResponse, error) {
	out := new(CreateAppResponse)
	err := c.cc.Invoke(ctx, Application_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) Update(ctx context.Context, in *UpdateApp, opts ...grpc.CallOption) (*UpdateAppResponse, error) {
	out := new(UpdateAppResponse)
	err := c.cc.Invoke(ctx, Application_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) Delete(ctx context.Context, in *DeleteApp, opts ...grpc.CallOption) (*DeleteAppResponse, error) {
	out := new(DeleteAppResponse)
	err := c.cc.Invoke(ctx, Application_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) Fetch(ctx context.Context, in *FetchApp, opts ...grpc.CallOption) (*FetchAppResponse, error) {
	out := new(FetchAppResponse)
	err := c.cc.Invoke(ctx, Application_Fetch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) FetchByID(ctx context.Context, in *FetchAppByID, opts ...grpc.CallOption) (*FetchAppIDResponse, error) {
	out := new(FetchAppIDResponse)
	err := c.cc.Invoke(ctx, Application_FetchByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationServer is the server API for Application service.
// All implementations must embed UnimplementedApplicationServer
// for forward compatibility
type ApplicationServer interface {
	Create(context.Context, *CreateApp) (*CreateAppResponse, error)
	Update(context.Context, *UpdateApp) (*UpdateAppResponse, error)
	Delete(context.Context, *DeleteApp) (*DeleteAppResponse, error)
	Fetch(context.Context, *FetchApp) (*FetchAppResponse, error)
	FetchByID(context.Context, *FetchAppByID) (*FetchAppIDResponse, error)
	mustEmbedUnimplementedApplicationServer()
}

// UnimplementedApplicationServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationServer struct {
}

func (UnimplementedApplicationServer) Create(context.Context, *CreateApp) (*CreateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedApplicationServer) Update(context.Context, *UpdateApp) (*UpdateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedApplicationServer) Delete(context.Context, *DeleteApp) (*DeleteAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedApplicationServer) Fetch(context.Context, *FetchApp) (*FetchAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedApplicationServer) FetchByID(context.Context, *FetchAppByID) (*FetchAppIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchByID not implemented")
}
func (UnimplementedApplicationServer) mustEmbedUnimplementedApplicationServer() {}

// UnsafeApplicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationServer will
// result in compilation errors.
type UnsafeApplicationServer interface {
	mustEmbedUnimplementedApplicationServer()
}

func RegisterApplicationServer(s grpc.ServiceRegistrar, srv ApplicationServer) {
	s.RegisterService(&Application_ServiceDesc, srv)
}

func _Application_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Application_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).Create(ctx, req.(*CreateApp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Application_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).Update(ctx, req.(*UpdateApp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Application_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).Delete(ctx, req.(*DeleteApp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchApp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Application_Fetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).Fetch(ctx, req.(*FetchApp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_FetchByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchAppByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).FetchByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Application_FetchByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).FetchByID(ctx, req.(*FetchAppByID))
	}
	return interceptor(ctx, in, info, handler)
}

// Application_ServiceDesc is the grpc.ServiceDesc for Application service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Application_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "next.Application",
	HandlerType: (*ApplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Application_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Application_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Application_Delete_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _Application_Fetch_Handler,
		},
		{
			MethodName: "FetchByID",
			Handler:    _Application_FetchByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "next.proto",
}
